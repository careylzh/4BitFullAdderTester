/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsmLogic_2 (
    input clk,
    input rst,
    input [4:0] io_button,
    output reg a,
    output reg b,
    output reg cin,
    input rst_n,
    input sum,
    input carry,
    output reg [23:0] io_led
  );
  
  
  
  
  localparam IDLE_state = 4'd0;
  localparam TEST000_state = 4'd1;
  localparam TEST001_state = 4'd2;
  localparam TEST010_state = 4'd3;
  localparam TEST011_state = 4'd4;
  localparam TEST100_state = 4'd5;
  localparam TEST101_state = 4'd6;
  localparam TEST110_state = 4'd7;
  localparam TEST111_state = 4'd8;
  localparam SUCC_state = 4'd9;
  localparam FAIL_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    io_led[16+0+0-:1] = 1'h1;
    io_led[16+1+0-:1] = 1'h1;
    io_led[16+2+0-:1] = 1'h1;
    io_led[16+3+0-:1] = 1'h1;
    io_led[16+4+0-:1] = 1'h1;
    io_led[16+5+0-:1] = 1'h1;
    io_led[16+6+0-:1] = 1'h1;
    io_led[16+7+0-:1] = 1'h1;
    io_led[0+1+0-:1] = 1'h1;
    io_led[0+7+0-:1] = 1'h1;
    
    case (M_state_q)
      IDLE_state: begin
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = TEST000_state;
        end
      end
      TEST000_state: begin
        a = 1'h0;
        b = 1'h0;
        cin = 1'h0;
        if (sum == 1'h0 & carry == 1'h0) begin
          M_state_d = TEST001_state;
        end else begin
          if (sum != 1'h0 || carry != 1'h0) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TEST001_state: begin
        a = 1'h0;
        b = 1'h0;
        cin = 1'h1;
        io_led[16+0+0-:1] = 1'h0;
        io_led[16+1+0-:1] = 1'h0;
        io_led[16+2+0-:1] = 1'h1;
        io_led[16+3+0-:1] = sum;
        io_led[16+4+0-:1] = carry;
        if (sum == 1'h1 & carry == 1'h0) begin
          M_state_d = TEST010_state;
        end else begin
          if (sum != 1'h1 | carry != 1'h0) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TEST010_state: begin
        a = 1'h0;
        b = 1'h1;
        cin = 1'h0;
        io_led[16+0+0-:1] = 1'h0;
        io_led[16+1+0-:1] = 1'h1;
        io_led[16+2+0-:1] = 1'h0;
        io_led[16+3+0-:1] = sum;
        io_led[16+4+0-:1] = carry;
        if (sum == 1'h1 & carry == 1'h0) begin
          M_state_d = TEST011_state;
        end else begin
          if (sum != 1'h1 | carry != 1'h0) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TEST011_state: begin
        a = 1'h0;
        b = 1'h1;
        cin = 1'h1;
        io_led[16+0+0-:1] = 1'h0;
        io_led[16+1+0-:1] = 1'h1;
        io_led[16+2+0-:1] = 1'h1;
        io_led[16+3+0-:1] = sum;
        io_led[16+4+0-:1] = carry;
        if (sum == 1'h0 & carry == 1'h1) begin
          M_state_d = TEST101_state;
        end else begin
          if (sum != 1'h0 | carry != 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TEST100_state: begin
        a = 1'h1;
        b = 1'h0;
        cin = 1'h0;
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+1+0-:1] = 1'h0;
        io_led[16+2+0-:1] = 1'h0;
        io_led[16+3+0-:1] = sum;
        io_led[16+4+0-:1] = carry;
        if (sum == 1'h1 & carry == 1'h0) begin
          M_state_d = TEST101_state;
        end else begin
          if (sum != 1'h1 | carry != 1'h0) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TEST101_state: begin
        a = 1'h1;
        b = 1'h0;
        cin = 1'h1;
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+1+0-:1] = 1'h0;
        io_led[16+2+0-:1] = 1'h1;
        io_led[16+3+0-:1] = sum;
        io_led[16+4+0-:1] = carry;
        if (sum == 1'h0 & carry == 1'h1) begin
          M_state_d = TEST110_state;
        end else begin
          if (sum != 1'h0 | carry != 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TEST110_state: begin
        a = 1'h1;
        b = 1'h1;
        cin = 1'h0;
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+1+0-:1] = 1'h1;
        io_led[16+2+0-:1] = 1'h0;
        io_led[16+3+0-:1] = sum;
        io_led[16+4+0-:1] = carry;
        if (sum == 1'h0 & carry == 1'h1) begin
          M_state_d = TEST111_state;
        end else begin
          if (sum != 1'h0 | carry != 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TEST111_state: begin
        a = 1'h1;
        b = 1'h1;
        cin = 1'h1;
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+1+0-:1] = 1'h1;
        io_led[16+2+0-:1] = 1'h1;
        io_led[16+3+0-:1] = sum;
        io_led[16+4+0-:1] = carry;
        if (sum == 1'h1 & carry == 1'h1) begin
          M_state_d = SUCC_state;
        end else begin
          if (sum != 1'h1 | carry != 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SUCC_state: begin
        io_led[0+1+0-:1] = 1'h1;
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      FAIL_state: begin
        io_led[0+7+0-:1] = 1'h1;
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
